// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListPatientParams creates a new ListPatientParams object
// with the default values initialized.
func NewListPatientParams() *ListPatientParams {
	var ()
	return &ListPatientParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListPatientParamsWithTimeout creates a new ListPatientParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListPatientParamsWithTimeout(timeout time.Duration) *ListPatientParams {
	var ()
	return &ListPatientParams{

		timeout: timeout,
	}
}

// NewListPatientParamsWithContext creates a new ListPatientParams object
// with the default values initialized, and the ability to set a context for a request
func NewListPatientParamsWithContext(ctx context.Context) *ListPatientParams {
	var ()
	return &ListPatientParams{

		Context: ctx,
	}
}

// NewListPatientParamsWithHTTPClient creates a new ListPatientParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListPatientParamsWithHTTPClient(client *http.Client) *ListPatientParams {
	var ()
	return &ListPatientParams{
		HTTPClient: client,
	}
}

/*ListPatientParams contains all the parameters to send to the API endpoint
for the list patient operation typically these are written to a http.Request
*/
type ListPatientParams struct {

	/*Age
	  name of patient

	*/
	Age *int64
	/*Conditions
	  name of patient

	*/
	Conditions *string
	/*Gender
	  name of patient

	*/
	Gender *string
	/*Limit
	  The numbers of items to return

	*/
	Limit *int64
	/*Name
	  name of patient

	*/
	Name *string
	/*Offset
	  The number of items to skip before starting to collect the result set

	*/
	Offset *int64
	/*Phone
	  name of patient

	*/
	Phone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list patient params
func (o *ListPatientParams) WithTimeout(timeout time.Duration) *ListPatientParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list patient params
func (o *ListPatientParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list patient params
func (o *ListPatientParams) WithContext(ctx context.Context) *ListPatientParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list patient params
func (o *ListPatientParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list patient params
func (o *ListPatientParams) WithHTTPClient(client *http.Client) *ListPatientParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list patient params
func (o *ListPatientParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAge adds the age to the list patient params
func (o *ListPatientParams) WithAge(age *int64) *ListPatientParams {
	o.SetAge(age)
	return o
}

// SetAge adds the age to the list patient params
func (o *ListPatientParams) SetAge(age *int64) {
	o.Age = age
}

// WithConditions adds the conditions to the list patient params
func (o *ListPatientParams) WithConditions(conditions *string) *ListPatientParams {
	o.SetConditions(conditions)
	return o
}

// SetConditions adds the conditions to the list patient params
func (o *ListPatientParams) SetConditions(conditions *string) {
	o.Conditions = conditions
}

// WithGender adds the gender to the list patient params
func (o *ListPatientParams) WithGender(gender *string) *ListPatientParams {
	o.SetGender(gender)
	return o
}

// SetGender adds the gender to the list patient params
func (o *ListPatientParams) SetGender(gender *string) {
	o.Gender = gender
}

// WithLimit adds the limit to the list patient params
func (o *ListPatientParams) WithLimit(limit *int64) *ListPatientParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list patient params
func (o *ListPatientParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the list patient params
func (o *ListPatientParams) WithName(name *string) *ListPatientParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list patient params
func (o *ListPatientParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the list patient params
func (o *ListPatientParams) WithOffset(offset *int64) *ListPatientParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list patient params
func (o *ListPatientParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPhone adds the phone to the list patient params
func (o *ListPatientParams) WithPhone(phone *string) *ListPatientParams {
	o.SetPhone(phone)
	return o
}

// SetPhone adds the phone to the list patient params
func (o *ListPatientParams) SetPhone(phone *string) {
	o.Phone = phone
}

// WriteToRequest writes these params to a swagger request
func (o *ListPatientParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Age != nil {

		// query param age
		var qrAge int64
		if o.Age != nil {
			qrAge = *o.Age
		}
		qAge := swag.FormatInt64(qrAge)
		if qAge != "" {
			if err := r.SetQueryParam("age", qAge); err != nil {
				return err
			}
		}

	}

	if o.Conditions != nil {

		// query param conditions
		var qrConditions string
		if o.Conditions != nil {
			qrConditions = *o.Conditions
		}
		qConditions := qrConditions
		if qConditions != "" {
			if err := r.SetQueryParam("conditions", qConditions); err != nil {
				return err
			}
		}

	}

	if o.Gender != nil {

		// query param gender
		var qrGender string
		if o.Gender != nil {
			qrGender = *o.Gender
		}
		qGender := qrGender
		if qGender != "" {
			if err := r.SetQueryParam("gender", qGender); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Phone != nil {

		// query param phone
		var qrPhone string
		if o.Phone != nil {
			qrPhone = *o.Phone
		}
		qPhone := qrPhone
		if qPhone != "" {
			if err := r.SetQueryParam("phone", qPhone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
