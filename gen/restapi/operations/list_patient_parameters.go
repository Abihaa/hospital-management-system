// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListPatientParams creates a new ListPatientParams object
// no default values defined in spec.
func NewListPatientParams() ListPatientParams {

	return ListPatientParams{}
}

// ListPatientParams contains all the bound params for the list patient operation
// typically these are obtained from a http.Request
//
// swagger:parameters listPatient
type ListPatientParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*name of patient
	  In: query
	*/
	Age *int64
	/*name of patient
	  In: query
	*/
	Conditions *string
	/*name of patient
	  In: query
	*/
	Gender *string
	/*The numbers of items to return
	  In: query
	*/
	Limit *int64
	/*name of patient
	  In: query
	*/
	Name *string
	/*The number of items to skip before starting to collect the result set
	  In: query
	*/
	Offset *int64
	/*name of patient
	  In: query
	*/
	Phone *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListPatientParams() beforehand.
func (o *ListPatientParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAge, qhkAge, _ := qs.GetOK("age")
	if err := o.bindAge(qAge, qhkAge, route.Formats); err != nil {
		res = append(res, err)
	}

	qConditions, qhkConditions, _ := qs.GetOK("conditions")
	if err := o.bindConditions(qConditions, qhkConditions, route.Formats); err != nil {
		res = append(res, err)
	}

	qGender, qhkGender, _ := qs.GetOK("gender")
	if err := o.bindGender(qGender, qhkGender, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qPhone, qhkPhone, _ := qs.GetOK("phone")
	if err := o.bindPhone(qPhone, qhkPhone, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAge binds and validates parameter Age from query.
func (o *ListPatientParams) bindAge(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("age", "query", "int64", raw)
	}
	o.Age = &value

	return nil
}

// bindConditions binds and validates parameter Conditions from query.
func (o *ListPatientParams) bindConditions(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Conditions = &raw

	return nil
}

// bindGender binds and validates parameter Gender from query.
func (o *ListPatientParams) bindGender(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Gender = &raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *ListPatientParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindName binds and validates parameter Name from query.
func (o *ListPatientParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Name = &raw

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *ListPatientParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindPhone binds and validates parameter Phone from query.
func (o *ListPatientParams) bindPhone(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Phone = &raw

	return nil
}
