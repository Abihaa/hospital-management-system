// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RemovePatientHandlerFunc turns a function with the right signature into a remove patient handler
type RemovePatientHandlerFunc func(RemovePatientParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemovePatientHandlerFunc) Handle(params RemovePatientParams) middleware.Responder {
	return fn(params)
}

// RemovePatientHandler interface for that can handle valid remove patient params
type RemovePatientHandler interface {
	Handle(RemovePatientParams) middleware.Responder
}

// NewRemovePatient creates a new http.Handler for the remove patient operation
func NewRemovePatient(ctx *middleware.Context, handler RemovePatientHandler) *RemovePatient {
	return &RemovePatient{Context: ctx, Handler: handler}
}

/*RemovePatient swagger:route DELETE /patient/{ID} removePatient

RemovePatient remove patient API

*/
type RemovePatient struct {
	Context *middleware.Context
	Handler RemovePatientHandler
}

func (o *RemovePatient) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemovePatientParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
