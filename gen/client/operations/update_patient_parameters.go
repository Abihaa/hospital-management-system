// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/abihaa/hospital-management-system/gen/models"
)

// NewUpdatePatientParams creates a new UpdatePatientParams object
// with the default values initialized.
func NewUpdatePatientParams() *UpdatePatientParams {
	var ()
	return &UpdatePatientParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdatePatientParamsWithTimeout creates a new UpdatePatientParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdatePatientParamsWithTimeout(timeout time.Duration) *UpdatePatientParams {
	var ()
	return &UpdatePatientParams{

		timeout: timeout,
	}
}

// NewUpdatePatientParamsWithContext creates a new UpdatePatientParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdatePatientParamsWithContext(ctx context.Context) *UpdatePatientParams {
	var ()
	return &UpdatePatientParams{

		Context: ctx,
	}
}

// NewUpdatePatientParamsWithHTTPClient creates a new UpdatePatientParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdatePatientParamsWithHTTPClient(client *http.Client) *UpdatePatientParams {
	var ()
	return &UpdatePatientParams{
		HTTPClient: client,
	}
}

/*UpdatePatientParams contains all the parameters to send to the API endpoint
for the update patient operation typically these are written to a http.Request
*/
type UpdatePatientParams struct {

	/*ID
	  UUID of the patient

	*/
	ID string
	/*Patient
	  patients details

	*/
	Patient *models.Patient

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update patient params
func (o *UpdatePatientParams) WithTimeout(timeout time.Duration) *UpdatePatientParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update patient params
func (o *UpdatePatientParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update patient params
func (o *UpdatePatientParams) WithContext(ctx context.Context) *UpdatePatientParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update patient params
func (o *UpdatePatientParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update patient params
func (o *UpdatePatientParams) WithHTTPClient(client *http.Client) *UpdatePatientParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update patient params
func (o *UpdatePatientParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the update patient params
func (o *UpdatePatientParams) WithID(id string) *UpdatePatientParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update patient params
func (o *UpdatePatientParams) SetID(id string) {
	o.ID = id
}

// WithPatient adds the patient to the update patient params
func (o *UpdatePatientParams) WithPatient(patient *models.Patient) *UpdatePatientParams {
	o.SetPatient(patient)
	return o
}

// SetPatient adds the patient to the update patient params
func (o *UpdatePatientParams) SetPatient(patient *models.Patient) {
	o.Patient = patient
}

// WriteToRequest writes these params to a swagger request
func (o *UpdatePatientParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ID
	if err := r.SetPathParam("ID", o.ID); err != nil {
		return err
	}

	if o.Patient != nil {
		if err := r.SetBodyParam(o.Patient); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
